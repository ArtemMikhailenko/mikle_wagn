// Прямой сервис для работы с Monday.com API без Supabase
import { NeonDesign } from '../types/configurator';

interface MondayItem {
  id: string;
  name: string;
  column_values: Array<{
    id: string;
    title: string;
    text?: string;
    value?: string;
  }>;
  subitems?: Array<{
    id: string;
    name: string;
    column_values: Array<{
      id: string;
      title: string;
      text?: string;
      value?: string;
    }>;
  }>;
}

interface MondayBoard {
  items: MondayItem[];
}

interface MondayResponse {
  data: {
    boards: MondayBoard[];
  };
}

class MondayDirectService {
  private apiToken: string;
  private apiUrl = 'https://api.monday.com/v2';
  private mainBoardId = '1923600883';
  private subtableBoardId = '1923902475';

  constructor() {
    this.apiToken = import.meta.env.VITE_MONDAY_API_TOKEN || '';
    if (!this.apiToken) {
      console.error('Monday.com API token not found in environment variables');
    }
  }

  // Получить все проекты с Monday.com
  async getAllProjects(): Promise<NeonDesign[]> {
    try {
      const query = `
        query {
          boards(ids: [${this.mainBoardId}]) {
            items {
              id
              name
              column_values {
                id
                title
                text
                value
              }
              subitems {
                id
                name
                column_values {
                  id
                  title
                  text
                  value
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        throw new Error(`Monday API error: ${response.statusText}`);
      }

      const data: MondayResponse = await response.json();
      
      // Отладка структуры ответа
      console.log('Monday API Response:', data);
      
      if (!data || !data.data) {
        console.error('Invalid Monday response structure:', data);
        throw new Error('Invalid response from Monday API');
      }
      
      if (!data.data.boards || data.data.boards.length === 0) {
        console.warn('No boards found in Monday response');
        return [];
      }
      
      const items = data.data.boards[0]?.items || [];
      console.log(`Found ${items.length} items in Monday board`);
      
      return this.convertMondayItemsToNeonDesigns(items);
    } catch (error) {
      console.error('Error fetching projects from Monday:', error);
      return [];
    }
  }

  // Получить конкретный проект по ID
  async getProjectById(projectId: string): Promise<NeonDesign | null> {
    try {
      const query = `
        query {
          boards(ids: [${this.mainBoardId}]) {
            items(ids: [${projectId}]) {
              id
              name
              column_values {
                id
                title
                text
                value
              }
              subitems {
                id
                name
                column_values {
                  id
                  title
                  text
                  value
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        throw new Error(`Monday API error: ${response.statusText}`);
      }

      const data: MondayResponse = await response.json();
      
      // Отладка структуры ответа
      console.log('Monday API Response for project:', data);
      
      if (!data || !data.data || !data.data.boards || data.data.boards.length === 0) {
        console.error('Invalid Monday response structure or no boards found');
        return null;
      }
      
      const items = data.data.boards[0]?.items || [];
      
      if (items.length === 0) {
        console.warn(`No items found for project ID: ${projectId}`);
        return null;
      }

      const converted = this.convertMondayItemsToNeonDesigns(items);
      return converted[0] || null;
    } catch (error) {
      console.error('Error fetching project from Monday:', error);
      return null;
    }
  }

  // Получить MockUp из subtable для конкретного проекта
  async getMockupForProject(projectId: string): Promise<string | null> {
    try {
      const query = `
        query {
          boards(ids: [${this.subtableBoardId}]) {
            items {
              id
              name
              column_values {
                id
                title
                text
                value
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        throw new Error(`Monday API error: ${response.statusText}`);
      }

      const data: MondayResponse = await response.json();
      const items = data.data.boards[0]?.items || [];
      
      // Ищем item связанный с нашим проектом
      const relatedItem = items.find(item => 
        item.name.includes(projectId) || 
        item.column_values.some(col => col.text?.includes(projectId))
      );

      if (!relatedItem) {
        return null;
      }

      // Ищем поле MockUp (file_mkq71vjr)
      const mockupField = relatedItem.column_values.find(col => col.id === 'file_mkq71vjr');
      
      if (!mockupField?.value) {
        return null;
      }

      try {
        const fileData = JSON.parse(mockupField.value);
        if (fileData.files && fileData.files.length > 0) {
          const fileUrl = fileData.files[0].url;
          // Возвращаем прокси URL для доступа к защищенному файлу
          return this.createProxyUrl(fileUrl);
        }
      } catch (e) {
        console.error('Error parsing MockUp field:', e);
      }

      return null;
    } catch (error) {
      console.error('Error fetching mockup from Monday:', error);
      return null;
    }
  }

  // Создать прокси URL для защищенных файлов Monday.com
  private createProxyUrl(mondayUrl: string): string {
    // Используем наш image-proxy для доступа к защищенным файлам
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    return `${supabaseUrl}/functions/v1/image-proxy?url=${encodeURIComponent(mondayUrl)}`;
  }

  // Прямой доступ к файлу Monday.com с API токеном
  async fetchMondayFile(fileUrl: string): Promise<Blob | null> {
    try {
      const response = await fetch(fileUrl, {
        headers: {
          'Authorization': this.apiToken,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch file: ${response.statusText}`);
      }

      return await response.blob();
    } catch (error) {
      console.error('Error fetching Monday file:', error);
      return null;
    }
  }

  // Конвертация Monday.com items в NeonDesign
  private convertMondayItemsToNeonDesigns(items: MondayItem[]): NeonDesign[] {
    return items.map(item => {
      // Извлекаем данные из колонок
      const clientEmail = this.getColumnValue(item, 'email') || 'no-email@example.com';
      const clientName = this.getColumnValue(item, 'person') || item.name || 'Unknown Client';
      const designName = item.name || 'Untitled Design';
      const notes = this.getColumnValue(item, 'long_text') || '';
      const status = this.getColumnValue(item, 'status') || 'draft';

      // Базовая конфигурация неона
      const neonDesign: NeonDesign = {
        id: `MONDAY-${item.id}`,
        name: designName,
        originalWidth: 100, // cm
        originalHeight: 30, // cm
        elements: 1,
        ledLength: 3.0, // meters
        mockupUrl: '', // Будет загружено отдельно через getMockupForProject
        description: notes || `Neon design for ${clientName}`,
        svgContent: '', // Будет заполнено позже если нужно
        hasCustomSvg: false,
        createdAt: new Date().toISOString(),
      };

      // Добавляем метаданные клиента как дополнительные свойства
      (neonDesign as any).clientEmail = clientEmail;
      (neonDesign as any).clientName = clientName;
      (neonDesign as any).status = status;
      (neonDesign as any).mondayId = item.id;

      return neonDesign;
    });
  }

  // Получить значение колонки по title или id
  private getColumnValue(item: MondayItem, searchKey: string): string | null {
    const column = item.column_values.find(col => 
      col.id.toLowerCase().includes(searchKey.toLowerCase()) ||
      col.title.toLowerCase().includes(searchKey.toLowerCase())
    );
    
    return column?.text || column?.value || null;
  }
}

export const mondayDirectService = new MondayDirectService();
export default mondayDirectService;
