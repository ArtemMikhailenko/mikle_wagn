// –ü—Ä—è–º–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Monday.com API –±–µ–∑ Supabase
import { NeonDesign } from '../types/configurator';

interface MondayItem {
  id: string;
  name: string;
  column_values: Array<{
    id: string;
    text?: string;
    value?: string;
  }>;
  subitems?: Array<{
    id: string;
    name: string;
    column_values: Array<{
      id: string;
      text?: string;
      value?: string;
    }>;
  }>;
}

interface MondayBoard {
  items_page: {
    items: MondayItem[];
  };
}

interface MondayResponse {
  data?: {
    boards?: MondayBoard[];
  };
  errors?: Array<{
    message: string;
    locations?: Array<{ line: number; column: number }>;
  }>;
}

class MondayDirectService {
  private apiToken: string;
  private apiUrl = 'https://api.monday.com/v2';
  private mainBoardId = '1923600883';
  private subtableBoardId = '1923902475';

  constructor() {
    this.apiToken = import.meta.env.VITE_MONDAY_API_TOKEN || '';
    if (!this.apiToken) {
      console.error('‚ùå Monday.com API token not found in environment variables');
    } else {
      console.log('‚úÖ Monday.com API token loaded');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å Monday.com
  async getAllProjects(): Promise<NeonDesign[]> {
    try {
      console.log('üîÑ Fetching all projects from Monday.com...');
      
      const query = `
        query {
          boards(ids: [${this.mainBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  title
                  text
                  value
                }
                subitems {
                  id
                  name
                  column_values {
                    id
                    title
                    text
                    value
                  }
                }
              }
            }
          }
        }
      `;

      console.log('üì§ Sending GraphQL query:', query);

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      console.log('üì• Monday API response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Monday API HTTP error: ${response.status} - ${response.statusText}`);
        console.error('Error details:', errorText);
        throw new Error(`Monday API HTTP error: ${response.statusText} (${response.status})`);
      }

      const data: MondayResponse = await response.json();
      
      // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      console.log('üìã Monday API Full Response:', JSON.stringify(data, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ GraphQL
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        throw new Error(`Monday GraphQL error: ${data.errors[0].message}`);
      }
      
      if (!data || !data.data) {
        console.error('‚ùå Invalid Monday response structure - no data field');
        return [];
      }
      
      if (!data.data.boards) {
        console.error('‚ùå Invalid Monday response structure - no boards field');
        return [];
      }
      
      if (data.data.boards.length === 0) {
        console.warn('‚ö†Ô∏è No boards found in Monday response');
        return [];
      }
      
      const items = data.data.boards[0]?.items_page?.items || [];
      console.log(`‚úÖ Found ${items.length} items in Monday board ${this.mainBoardId}`);
      
      const converted = this.convertMondayItemsToNeonDesigns(items);
      console.log(`‚úÖ Converted ${converted.length} items to NeonDesign objects`);
      
      return converted;
    } catch (error) {
      console.error('‚ùå Error fetching projects from Monday:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ ID
  async getProjectById(projectId: string): Promise<NeonDesign | null> {
    try {
      console.log(`üîÑ Fetching project ${projectId} from Monday.com...`);
      
      const query = `
        query {
          boards(ids: [${this.mainBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  title
                  text
                  value
                }
                subitems {
                  id
                  name
                  column_values {
                    id
                    title
                    text
                    value
                  }
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Monday API HTTP error: ${response.status} - ${response.statusText}`);
        console.error('Error details:', errorText);
        throw new Error(`Monday API HTTP error: ${response.statusText} (${response.status})`);
      }

      const data: MondayResponse = await response.json();
      
      // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      console.log('üìã Monday API Response for project:', JSON.stringify(data, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ GraphQL
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        throw new Error(`Monday GraphQL error: ${data.errors[0].message}`);
      }
      
      if (!data || !data.data || !data.data.boards || data.data.boards.length === 0) {
        console.error('‚ùå Invalid Monday response structure or no boards found');
        return null;
      }
      
      const items = data.data.boards[0]?.items_page?.items || [];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
      const filteredItems = items.filter(item => item.id === projectId);
      
      if (filteredItems.length === 0) {
        console.warn(`‚ö†Ô∏è No items found for project ID: ${projectId}`);
        return null;
      }

      const converted = this.convertMondayItemsToNeonDesigns(filteredItems);
      return converted[0] || null;
    } catch (error) {
      console.error('‚ùå Error fetching project from Monday:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å MockUp –∏–∑ subtable –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  async getMockupForProject(projectId: string): Promise<string | null> {
    try {
      console.log(`üîÑ Fetching mockup for project ${projectId} from subtable...`);
      
      const query = `
        query {
          boards(ids: [${this.subtableBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  title
                  text
                  value
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Monday API HTTP error: ${response.status} - ${response.statusText}`);
        return null;
      }

      const data: MondayResponse = await response.json();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ GraphQL
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        return null;
      }
      
      if (!data || !data.data || !data.data.boards || data.data.boards.length === 0) {
        console.warn('‚ö†Ô∏è No subtable boards found');
        return null;
      }
      
      const items = data.data.boards[0]?.items_page?.items || [];
      
      // –ò—â–µ–º item —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º
      const relatedItem = items.find((item: MondayItem) => 
        item.name.includes(projectId) || 
        item.column_values.some((col: any) => col.text?.includes(projectId))
      );

      if (!relatedItem) {
        console.warn(`‚ö†Ô∏è No related subtable item found for project ${projectId}`);
        return null;
      }

      // –ò—â–µ–º –ø–æ–ª–µ MockUp (file_mkq71vjr)
      const mockupField = relatedItem.column_values.find((col: any) => col.id === 'file_mkq71vjr');
      
      if (!mockupField?.value) {
        console.warn(`‚ö†Ô∏è No MockUp field found for project ${projectId}`);
        return null;
      }

      try {
        const fileData = JSON.parse(mockupField.value);
        if (fileData.files && fileData.files.length > 0) {
          const fileUrl = fileData.files[0].url;
          console.log(`‚úÖ Found MockUp URL: ${fileUrl}`);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
          return this.createProxyUrl(fileUrl);
        }
      } catch (e) {
        console.error('‚ùå Error parsing MockUp field:', e);
      }

      return null;
    } catch (error) {
      console.error('‚ùå Error fetching mockup from Monday:', error);
      return null;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Monday.com
  private createProxyUrl(mondayUrl: string): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à image-proxy –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    const proxyUrl = `${supabaseUrl}/functions/v1/image-proxy?url=${encodeURIComponent(mondayUrl)}`;
    console.log(`üîó Created proxy URL: ${proxyUrl}`);
    return proxyUrl;
  }

  // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É Monday.com —Å API —Ç–æ–∫–µ–Ω–æ–º
  async fetchMondayFile(fileUrl: string): Promise<Blob | null> {
    try {
      const response = await fetch(fileUrl, {
        headers: {
          'Authorization': this.apiToken,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch file: ${response.statusText}`);
      }

      return await response.blob();
    } catch (error) {
      console.error('‚ùå Error fetching Monday file:', error);
      return null;
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Monday.com items –≤ NeonDesign
  private convertMondayItemsToNeonDesigns(items: MondayItem[]): NeonDesign[] {
    console.log(`üîÑ Converting ${items.length} Monday items to NeonDesign objects...`);
    
    return items.map(item => {
      console.log(`üìù Processing item: ${item.name} (ID: ${item.id})`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
      const clientEmail = this.getColumnValue(item, 'email') || this.getColumnValue(item, 'person') || 'no-email@example.com';
      const clientName = this.getColumnValue(item, 'person') || this.getColumnValue(item, 'name') || item.name || 'Unknown Client';
      const designName = item.name || 'Untitled Design';
      const notes = this.getColumnValue(item, 'long_text') || this.getColumnValue(item, 'text') || '';
      const status = this.getColumnValue(item, 'status') || 'draft';

      console.log(`üìä Extracted data - Email: ${clientEmail}, Name: ${clientName}, Status: ${status}`);

      // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–æ–Ω–∞
      const neonDesign: NeonDesign = {
        id: `MONDAY-${item.id}`,
        name: designName,
        originalWidth: 100, // cm
        originalHeight: 30, // cm
        elements: 1,
        ledLength: 3.0, // meters
        mockupUrl: '', // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ getMockupForProject
        description: notes || `Neon design for ${clientName}`,
        svgContent: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        hasCustomSvg: false,
        createdAt: new Date().toISOString(),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      (neonDesign as any).clientEmail = clientEmail;
      (neonDesign as any).clientName = clientName;
      (neonDesign as any).status = status;
      (neonDesign as any).mondayId = item.id;

      return neonDesign;
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ id
  private getColumnValue(item: MondayItem, searchKey: string): string | null {
    const column = item.column_values.find(col => 
      col.id.toLowerCase().includes(searchKey.toLowerCase())
    );
    
    return column?.text || column?.value || null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Monday.com
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîÑ Testing Monday.com connection...');
      
      const query = `
        query {
          me {
            id
            name
            email
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        console.error(`‚ùå Monday API connection failed: ${response.status}`);
        return false;
      }

      const data = await response.json();
      
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        return false;
      }

      console.log('‚úÖ Monday.com connection successful');
      return true;
    } catch (error) {
      console.error('‚ùå Error testing Monday connection:', error);
      return false;
    }
  }
}

export const mondayDirectService = new MondayDirectService();
export default mondayDirectService;
