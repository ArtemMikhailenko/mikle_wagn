import { NeonDesign } from '../types/configurator';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ CRM —á–µ—Ä–µ–∑ Make
export interface CRMDesignData {
  id: string;
  name: string;
  width: number; // –≤ —Å–º
  height: number; // –≤ —Å–º
  ledLength: number; // –≤ –º–µ—Ç—Ä–∞—Ö
  elements: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  svgContent?: string; // SVG-—Ñ–∞–π–ª –¥–∏–∑–∞–π–Ω–∞
  svgUrl?: string; // URL –Ω–∞ SVG-—Ñ–∞–π–ª
  isWaterproof: boolean; // Wasserdicht
  hasUvPrint: boolean; // UV-Druck
  clientId?: string; // ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
  projectId?: string; // ID –ø—Ä–æ–µ–∫—Ç–∞
  createdAt?: string;
  expiresAt?: string;
}

export interface CRMProjectData {
  projectId: string;
  clientId: string;
  clientName?: string;
  designs: CRMDesignData[];
  metadata?: {
    contactEmail?: string;
    contactPhone?: string;
    deadline?: string;
    notes?: string;
  };
}

class MakeService {
  private webhookUrl: string;
  private apiKey: string;
  private scenarioId: string;
  private isConfigured: boolean = false;
  private cache: Map<string, CRMProjectData> = new Map();
  private lastUpdate: Date | null = null;

  constructor() {
    this.webhookUrl = import.meta.env.VITE_MAKE_WEBHOOK_URL || '';
    this.apiKey = import.meta.env.VITE_MAKE_API_KEY || '';
    this.scenarioId = import.meta.env.VITE_MAKE_SCENARIO_ID || '';
    
    this.isConfigured = !!(this.webhookUrl && this.apiKey);
    
    if (!this.isConfigured) {
      console.warn('‚ö†Ô∏è Make.com –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      console.log('üí° –î–æ–±–∞–≤—å—Ç–µ VITE_MAKE_WEBHOOK_URL –∏ VITE_MAKE_API_KEY –≤ .env —Ñ–∞–π–ª');
    } else {
      console.log('üîó Make.com —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('üîó Webhook URL:', this.webhookUrl.substring(0, 50) + '...');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    this.initializeMockData();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  private initializeMockData(): void {
    const mockProject: CRMProjectData = {
      projectId: 'proj_123456',
      clientId: 'client_789',
      clientName: 'Musterfirma GmbH',
      designs: [
        {
          id: 'crm_design_1',
          name: 'Firmenlogo Musterfirma',
          width: 400, // 4m
          height: 200, // 2m 
          ledLength: 12,
          elements: 5,
          isWaterproof: true,
          hasUvPrint: true,
          svgContent: `<svg viewBox="0 0 400 200" xmlns="http://www.w3.org/2000/svg">
            <rect x="10" y="10" width="380" height="180" fill="none" stroke="#2563EB" stroke-width="4" rx="20"/>
            <text x="200" y="80" text-anchor="middle" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="#2563EB">MUSTERFIRMA</text>
            <text x="200" y="120" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" fill="#6B7280">Professional Solutions GmbH</text>
            <circle cx="50" cy="50" r="20" fill="#2563EB"/>
            <circle cx="350" cy="150" r="15" fill="#2563EB"/>
          </svg>`,
          createdAt: new Date().toISOString(),
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 –¥–Ω–µ–π
        },
        {
          id: 'crm_design_2', 
          name: 'Produktname Neon',
          width: 300, // 3m
          height: 100, // 1m
          ledLength: 8,
          elements: 3,
          isWaterproof: false,
          hasUvPrint: true,
          svgContent: `<svg viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 50 Q80 20, 140 50 Q200 20, 280 50" fill="none" stroke="#DC2626" stroke-width="6" stroke-linecap="round"/>
            <text x="150" y="65" text-anchor="middle" font-family="Arial, sans-serif" font-size="22" font-weight="bold" fill="#DC2626">PREMIUM NEON</text>
          </svg>`,
          createdAt: new Date().toISOString(),
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
        }
      ],
      metadata: {
        contactEmail: 'kunde@musterfirma.de',
        contactPhone: '+49 123 456789',
        deadline: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
        notes: 'Eilauftrag - bis Ende des Monats ben√∂tigt'
      }
    };

    this.cache.set(mockProject.projectId, mockProject);
    this.lastUpdate = new Date();
    console.log('üß™ Make.com Mock-Daten initialisiert:', mockProject);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ CRM —á–µ—Ä–µ–∑ Make
   */
  async fetchProjectData(projectId: string): Promise<CRMProjectData | null> {
    if (!this.isConfigured) {
      console.log('üì¶ Make.com –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ');
      return this.cache.get(projectId) || null;
    }

    try {
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Make.com:', projectId);
      
      const response = await fetch(`${this.webhookUrl}/project/${projectId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const projectData: CRMProjectData = await response.json();
      
      // –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      this.cache.set(projectId, projectData);
      this.lastUpdate = new Date();
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Make.com:', projectData);
      return projectData;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Make.com:', error);
      
      // Fallback –∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      const cachedData = this.cache.get(projectId);
      if (cachedData) {
        console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return cachedData;
      }
      
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
   */
  async requestClientLink(projectData: CRMProjectData): Promise<string | null> {
    if (!this.isConfigured) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock —Å—Å—ã–ª–∫—É
      const linkId = `demo_${projectData.projectId}_${Date.now()}`;
      console.log('üîó Mock –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:', linkId);
      return `${window.location.origin}/client/${linkId}`;
    }

    try {
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Make.com');
      
      const response = await fetch(`${this.webhookUrl}/create-link`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          projectId: projectData.projectId,
          clientId: projectData.clientId,
          designs: projectData.designs.map(d => ({
            id: d.id,
            name: d.name,
            width: d.width,
            height: d.height,
            ledLength: d.ledLength,
            elements: d.elements,
            isWaterproof: d.isWaterproof,
            hasUvPrint: d.hasUvPrint
          })),
          expiresIn: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.linkUrl);
      return result.linkUrl;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Å—ã–ª–∫–∏:', error);
      return null;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CRM –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç NeonDesign
   */
  convertToNeonDesigns(crmData: CRMProjectData): NeonDesign[] {
    return crmData.designs.map((design) => ({
      id: design.id,
      name: design.name,
      originalWidth: design.width,
      originalHeight: design.height,
      elements: design.elements,
      ledLength: design.ledLength,
      mockupUrl: `https://images.pexels.com/photos/1036936/pexels-photo-1036936.jpeg?auto=compress&cs=tinysrgb&w=800&h=400&fit=crop`,
      description: `Design aus CRM: ${design.name}`,
      // SVG –ø–æ–¥–¥–µ—Ä–∂–∫–∞
      svgContent: design.svgContent,
      svgUrl: design.svgUrl,
      hasCustomSvg: !!(design.svgContent || design.svgUrl),
      // Client link support
      expiresAt: design.expiresAt,
      createdAt: design.createdAt,
    }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
   */
  getAllProjects(): CRMProjectData[] {
    return Array.from(this.cache.values());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
   */
  getStatus() {
    return {
      isConfigured: this.isConfigured,
      hasWebhookUrl: !!this.webhookUrl,
      hasApiKey: !!this.apiKey,
      lastUpdate: this.lastUpdate,
      cachedProjects: this.cache.size,
      projects: this.getAllProjects().map(p => ({
        projectId: p.projectId,
        clientName: p.clientName,
        designCount: p.designs.length
      }))
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  clearCache(): void {
    this.cache.clear();
    this.lastUpdate = null;
    console.log('üßπ Make.com –∫–µ—à –æ—á–∏—â–µ–Ω');
  }

  /**
   * Webhook endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Make.com
   * –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ API route
   */
  handleWebhook(data: any): CRMProjectData | null {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!data.projectId || !data.designs || !Array.isArray(data.designs)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö webhook');
      }

      const projectData: CRMProjectData = {
        projectId: data.projectId,
        clientId: data.clientId || `client_${Date.now()}`,
        clientName: data.clientName,
        designs: data.designs.map((d: any) => ({
          id: d.id || `design_${Date.now()}_${Math.random()}`,
          name: d.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω',
          width: Number(d.width) || 200,
          height: Number(d.height) || 100,
          ledLength: Number(d.ledLength) || 5,
          elements: Number(d.elements) || 1,
          isWaterproof: Boolean(d.isWaterproof),
          hasUvPrint: Boolean(d.hasUvPrint),
          svgContent: d.svgContent,
          svgUrl: d.svgUrl,
          createdAt: new Date().toISOString(),
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
        })),
        metadata: data.metadata || {}
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      this.cache.set(projectData.projectId, projectData);
      this.lastUpdate = new Date();

      console.log('üì• Webhook –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', projectData);
      return projectData;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const makeService = new MakeService();
export default makeService;
