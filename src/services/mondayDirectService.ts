// –ü—Ä—è–º–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Monday.com API –±–µ–∑ Supabase
import { NeonDesign } from '../types/configurator';

interface MondayItem {
  id: string;
  name: string;
  column_values: Array<{
    id: string;
    text?: string;
    value?: string;
  }>;
  subitems?: Array<{
    id: string;
    name: string;
    column_values: Array<{
      id: string;
      text?: string;
      value?: string;
    }>;
  }>;
}

interface MondayBoard {
  items_page: {
    items: MondayItem[];
  };
}

interface MondayResponse {
  data?: {
    boards?: MondayBoard[];
  };
  errors?: Array<{
    message: string;
    locations?: Array<{ line: number; column: number }>;
  }>;
}

class MondayDirectService {
  private apiToken: string;
  private apiUrl = 'https://api.monday.com/v2';
  private mainBoardId: string;
  private subtableBoardId = '1923902475';

  constructor() {
    this.apiToken = import.meta.env.VITE_MONDAY_API_TOKEN || '';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º board –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π board –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
    this.mainBoardId = '1923600883'; // –û—Å–Ω–æ–≤–Ω–æ–π board —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    
    if (!this.apiToken) {
      console.error('‚ùå Monday.com API token not found in environment variables');
    } else {
      console.log('‚úÖ Monday.com API token loaded');
    }
    
    console.log(`üìã Using main board ID (clients): ${this.mainBoardId}`);
    console.log(`üìã Using subtable board ID (mockups): ${this.subtableBoardId}`);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å Monday.com
  async getAllProjects(): Promise<NeonDesign[]> {
    try {
      console.log('üîÑ Fetching all projects from Monday.com...');
      
      const query = `
        query {
          boards(ids: [${this.mainBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  text
                  value
                }
                subitems {
                  id
                  name
                  column_values {
                    id
                    text
                    value
                  }
                }
              }
            }
          }
        }
      `;

      console.log('üì§ Sending GraphQL query:', query);

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      console.log('üì• Monday API response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Monday API HTTP error: ${response.status} - ${response.statusText}`);
        console.error('Error details:', errorText);
        throw new Error(`Monday API HTTP error: ${response.statusText} (${response.status})`);
      }

      const data: MondayResponse = await response.json();
      
      // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      console.log('üìã Monday API Full Response:', JSON.stringify(data, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ GraphQL
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        throw new Error(`Monday GraphQL error: ${data.errors[0].message}`);
      }
      
      if (!data || !data.data) {
        console.error('‚ùå Invalid Monday response structure - no data field');
        return [];
      }
      
      if (!data.data.boards) {
        console.error('‚ùå Invalid Monday response structure - no boards field');
        return [];
      }
      
      if (data.data.boards.length === 0) {
        console.warn('‚ö†Ô∏è No boards found in Monday response');
        return [];
      }
      
      const items = data.data.boards[0]?.items_page?.items || [];
      console.log(`‚úÖ Found ${items.length} items in Monday board ${this.mainBoardId}`);
      
      const converted = this.convertMondayItemsToNeonDesigns(items);
      console.log(`‚úÖ Converted ${converted.length} items to NeonDesign objects`);
      
      return converted;
    } catch (error) {
      console.error('‚ùå Error fetching projects from Monday:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ ID
  async getProjectById(projectId: string): Promise<NeonDesign | null> {
    try {
      console.log(`üîÑ Fetching project ${projectId} from Monday.com...`);
      
      const query = `
        query {
          boards(ids: [${this.mainBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  text
                  value
                }
                subitems {
                  id
                  name
                  column_values {
                    id
                    text
                    value
                  }
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Monday API HTTP error: ${response.status} - ${response.statusText}`);
        console.error('Error details:', errorText);
        throw new Error(`Monday API HTTP error: ${response.statusText} (${response.status})`);
      }

      const data: MondayResponse = await response.json();
      
      // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      console.log('üìã Monday API Response for project:', JSON.stringify(data, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ GraphQL
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        throw new Error(`Monday GraphQL error: ${data.errors[0].message}`);
      }
      
      if (!data || !data.data || !data.data.boards || data.data.boards.length === 0) {
        console.error('‚ùå Invalid Monday response structure or no boards found');
        return null;
      }
      
      const items = data.data.boards[0]?.items_page?.items || [];
      console.log(`üìä Total items in board: ${items.length}`);
      console.log(`üîç Looking for project ID: ${projectId}`);
      console.log(`üìù Available item IDs:`, items.map(item => item.id));
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
      const filteredItems = items.filter(item => item.id === projectId);
      console.log(`üéØ Filtered items found: ${filteredItems.length}`);
      
      if (filteredItems.length === 0) {
        console.warn(`‚ö†Ô∏è No items found for exact project ID: ${projectId}`);
        console.warn('Available IDs in board:', items.map(item => `${item.id} (${item.name})`));
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—è–º
        const fallbackItems = items.filter(item => 
          item.name.includes(projectId) || 
          item.id.includes(projectId)
        );
        
        if (fallbackItems.length > 0) {
          console.log(`üîÑ Found ${fallbackItems.length} items by fallback search`);
          const converted = this.convertMondayItemsToNeonDesigns(fallbackItems);
          return converted[0] || null;
        }
        
        return null;
      }

      const converted = this.convertMondayItemsToNeonDesigns(filteredItems);
      const project = converted[0] || null;
      
      // –ï—Å–ª–∏ MockUp –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ subtable
      if (project && !project.mockupUrl) {
        console.log(`üîç No MockUp in main board, checking subtable for project ${projectId}...`);
        try {
          const subtableMockup = await this.getMockupForProject(projectId);
          if (subtableMockup) {
            project.mockupUrl = subtableMockup;
            console.log(`‚úÖ Found MockUp in subtable: ${subtableMockup}`);
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è Error checking subtable for MockUp:', e);
        }
      }
      
      // –ï—Å–ª–∏ SVG –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ subtable
      if (project && !(project as any).svgUrl) {
        console.log(`üîç No SVG in main board, checking subtable for project ${projectId}...`);
        try {
          const subtableSvg = await this.getSvgForProject(projectId);
          if (subtableSvg) {
            (project as any).svgUrl = subtableSvg;
            console.log(`‚úÖ Found SVG in subtable: ${subtableSvg}`);
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è Error checking subtable for SVG:', e);
        }
      }
      
      return project;
    } catch (error) {
      console.error('‚ùå Error fetching project from Monday:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å MockUp –∏–∑ subtable –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  async getMockupForProject(projectId: string): Promise<string | null> {
    try {
      console.log(`üîÑ Fetching mockup for project ${projectId} from subtable...`);
      
      const query = `
        query {
          boards(ids: [${this.subtableBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  text
                  value
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        console.error(`‚ùå Monday API HTTP error: ${response.status} - ${response.statusText}`);
        return null;
      }

      const data: MondayResponse = await response.json();
      
      console.log(`üìã Subtable API Response:`, {
        boardId: this.subtableBoardId,
        hasData: !!data?.data,
        boardsCount: data?.data?.boards?.length || 0,
        itemsCount: data?.data?.boards?.[0]?.items_page?.items?.length || 0,
        firstItemName: data?.data?.boards?.[0]?.items_page?.items?.[0]?.name || 'none'
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ GraphQL
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        return null;
      }
      
      if (!data || !data.data || !data.data.boards || data.data.boards.length === 0) {
        console.warn('‚ö†Ô∏è No subtable boards found');
        return null;
      }
      
      const items = data.data.boards[0]?.items_page?.items || [];
      
      // –ò—â–µ–º item —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
      console.log(`üîç Subtable items found: ${items.length}`);
      console.log(`üìù Subtable item names:`, items.map(item => `${item.id}: ${item.name}`));
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID
      let relatedItem = items.find((item: MondayItem) => item.id === projectId);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (!relatedItem) {
        relatedItem = items.find((item: MondayItem) => item.name.includes(projectId));
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–ª—è—Ö
      if (!relatedItem) {
        relatedItem = items.find((item: MondayItem) => 
          item.column_values.some((col: any) => col.text?.includes(projectId))
        );
      }

      console.log(`üéØ Related item found:`, relatedItem ? `${relatedItem.id}: ${relatedItem.name}` : 'None');
      console.log(`üîç Search details:`, {
        exactIdMatch: items.some(item => item.id === projectId),
        nameMatch: items.some(item => item.name.includes(projectId)),
        projectIdToFind: projectId
      });

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–≤—è–∑–∏, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      if (!relatedItem) {
        console.warn(`‚ö†Ô∏è No direct relationship found for project ${projectId} in subtable`);
        console.log(`üîç Search details:`, {
          exactIdMatch: items.some(item => item.id === projectId),
          nameMatch: items.some(item => item.name.includes(projectId)),
          projectIdToFind: projectId
        });
        
        // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏
        return null;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log(`üìä Subtable item fields:`, relatedItem.column_values.map(col => ({
        id: col.id,
        text: col.text,
        hasValue: !!col.value,
        valuePreview: col.value ? (col.value.length > 100 ? col.value.substring(0, 100) + '...' : col.value) : null
      })));
      
      // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å–≤—è–∑—å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–≤—è–∑—ã–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
      const parentFields = relatedItem.column_values.filter(col => 
        col.id.includes('parent') || 
        col.id.includes('connect') || 
        col.id.includes('link') || 
        col.text?.includes(projectId)
      );
      console.log(`üîó Potential parent/connection fields:`, parentFields);

      // –ò—â–µ–º –ø–æ–ª–µ MockUp - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ID
      const possibleMockupFields = ['file_mkq71vjr', 'file_mkq6eahq', 'file_mkq6q0v2', 'mockup', 'file'];
      let mockupField = null;
      
      for (const fieldId of possibleMockupFields) {
        mockupField = relatedItem.column_values.find((col: any) => col.id === fieldId);
        if (mockupField?.value) {
          console.log(`‚úÖ Found MockUp field with ID: ${fieldId}`);
          break;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ª—é–±–æ–µ file –ø–æ–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏
      if (!mockupField?.value) {
        mockupField = relatedItem.column_values.find((col: any) => 
          col.id.includes('file') && col.value
        );
        if (mockupField) {
          console.log(`üîß Found alternative file field: ${mockupField.id}`);
        }
      }
      
      if (!mockupField?.value) {
        console.warn(`‚ö†Ô∏è No MockUp field value found for project ${projectId}`);
        console.log(`üìã MockUp field info:`, {
          id: mockupField?.id,
          text: mockupField?.text,
          hasValue: !!mockupField?.value
        });
        return null;
      }

      console.log(`üìÑ Raw MockUp field value:`, mockupField.value);

      try {
        const fileData = JSON.parse(mockupField.value);
        console.log(`üìä Parsed file data:`, fileData);
        
        if (fileData.files && fileData.files.length > 0) {
          const file = fileData.files[0];
          
          // Monday.com –∏—Å–ø–æ–ª—å–∑—É–µ—Ç assetId - –ø–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –Ω–∞–ø—Ä—è–º—É—é
          if (file.assetId) {
            console.log(`üîç Getting public URL for assetId: ${file.assetId}`);
            const publicUrl = await this.getPublicAssetUrl(file.assetId);
            
            if (publicUrl) {
              console.log(`‚úÖ Got public MockUp URL: ${publicUrl}`);
              return publicUrl;
            } else {
              console.warn(`‚ö†Ô∏è Could not get public URL for assetId: ${file.assetId}`);
              // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏
              const mondayFileUrl = `https://files.monday.com/files/${file.assetId}`;
              return this.createProxyUrl(mondayFileUrl);
            }
          } else if (file.url) {
            // Fallback: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–æ–π URL
            console.log(`‚úÖ Found direct MockUp URL: ${file.url}`);
            return file.url;
          } else {
            console.warn(`‚ö†Ô∏è No URL or assetId found in file data:`, file);
          }
        } else {
          console.warn(`‚ö†Ô∏è No files found in MockUp field data:`, fileData);
        }
      } catch (e) {
        console.error('‚ùå Error parsing MockUp field:', e);
        console.log(`‚ùå Failed to parse value:`, mockupField.value);
      }

      return null;
    } catch (error) {
      console.error('‚ùå Error fetching mockup from Monday:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Monday.com GraphQL API
  private async getPublicAssetUrl(assetId: string): Promise<string | null> {
    try {
      const graphqlQuery = {
        query: `
          query {
            assets(ids: [${assetId}]) {
              id
              url
              public_url
            }
          }
        `
      };

      console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ä–µ—Å—É—Ä—Å–∞: ${assetId}`);

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken
        },
        body: JSON.stringify(graphqlQuery)
      });

      if (!response.ok) {
        console.log(`‚ùå GraphQL API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
        return null;
      }

      const data = await response.json();
      
      if (data.errors) {
        console.log('‚ùå GraphQL –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫–∏:', data.errors);
        return null;
      }
      
      if (data.data?.assets?.length > 0) {
        const asset = data.data.assets[0];
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–µ:', asset);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å public_url, –∑–∞—Ç–µ–º –æ–±—ã—á–Ω—ã–π url
        return asset.public_url || asset.url || null;
      } else {
        console.log('‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
        return null;
      }
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL: ${error.message}`);
      return null;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Monday.com (fallback)
  private createProxyUrl(mondayUrl: string): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à image-proxy –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º assetId –∏–∑ URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ–∫—Å–∏
    let assetId = '';
    if (mondayUrl.includes('/files/')) {
      const match = mondayUrl.match(/\/files\/(\d+)/);
      if (match && match[1]) {
        assetId = match[1];
      }
    }
    
    const proxyUrl = `${supabaseUrl}/functions/v1/image-proxy?url=${encodeURIComponent(mondayUrl)}&id=${assetId}`;
    console.log(`üîó Created proxy URL: ${proxyUrl}`);
    return proxyUrl;
  }

  // –ü–æ–ª—É—á–∏—Ç—å SVG –∏–∑ subtable –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  async getSvgForProject(projectId: string): Promise<string | null> {
    try {
      console.log(`üîÑ Fetching SVG for project ${projectId} from subtable...`);
      
      const query = `
        query {
          boards(ids: [${this.subtableBoardId}]) {
            items_page(limit: 100) {
              items {
                id
                name
                column_values {
                  id
                  text
                  value
                }
              }
            }
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken
        },
        body: JSON.stringify({ query })
      });

      const result = await response.json();
      console.log('üìã SVG API Response for project:', JSON.stringify(result, null, 2));

      if (!result?.data?.boards?.[0]?.items_page?.items) {
        console.warn(`‚ö†Ô∏è No subtable data found for SVG search`);
        return null;
      }

      const items = result.data.boards[0].items_page.items;
      console.log(`üîç Subtable items found: ${items.length}`);

      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø—Ä–æ–µ–∫—Ç–æ–º
      let relatedItem = items.find((item: any) => item.id === projectId);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (!relatedItem) {
        relatedItem = items.find((item: any) => item.name.includes(projectId));
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–ª—è—Ö
      if (!relatedItem) {
        relatedItem = items.find((item: any) => 
          item.column_values.some((col: any) => col.text?.includes(projectId))
        );
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ID (–ø–µ—Ä–≤—ã–µ 8 —Ü–∏—Ñ—Ä)
      if (!relatedItem && projectId.length >= 8) {
        const partialId = projectId.substring(0, 8);
        console.log(`üîç SVG: Trying partial ID match: ${partialId}`);
        relatedItem = items.find((item: any) => item.id.startsWith(partialId));
        if (relatedItem) {
          console.log(`‚úÖ SVG: Found partial match: ${relatedItem.id}: ${relatedItem.name}`);
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä)
      if (!relatedItem && projectId.length >= 6) {
        const shortId = projectId.substring(0, 6);
        console.log(`üîç SVG: Trying short ID match: ${shortId}`);
        relatedItem = items.find((item: any) => item.id.startsWith(shortId));
        if (relatedItem) {
          console.log(`‚úÖ SVG: Found short match: ${relatedItem.id}: ${relatedItem.name}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ID (–ø–µ—Ä–≤—ã–µ 8 —Ü–∏—Ñ—Ä)
      if (!relatedItem && projectId.length >= 8) {
        const partialId = projectId.substring(0, 8);
        console.log(`üîç Trying partial ID match: ${partialId}`);
        relatedItem = items.find((item: any) => item.id.startsWith(partialId));
        if (relatedItem) {
          console.log(`‚úÖ Found partial match: ${relatedItem.id}: ${relatedItem.name}`);
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä)
      if (!relatedItem && projectId.length >= 6) {
        const shortId = projectId.substring(0, 6);
        console.log(`üîç Trying short ID match: ${shortId}`);
        relatedItem = items.find((item: any) => item.id.startsWith(shortId));
        if (relatedItem) {
          console.log(`‚úÖ Found short match: ${relatedItem.id}: ${relatedItem.name}`);
        }
      }

      if (!relatedItem) {
        console.warn(`‚ö†Ô∏è No related subtable item found for SVG in project ${projectId}`);
        return null;
      }

      // –ò—â–µ–º SVG –ø–æ–ª—è
      const svgField = relatedItem.column_values.find((col: any) => 
        col.id.includes('file') && col.value && col.text?.toLowerCase().includes('.svg')
      );

      if (!svgField?.value) {
        console.log(`üîç No SVG field found in subtable for project ${projectId}`);
        return null;
      }

      console.log(`üìÑ Raw SVG field value:`, svgField.value);

      try {
        const fileData = JSON.parse(svgField.value);
        
        if (fileData.files && fileData.files.length > 0) {
          const file = fileData.files[0];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SVG —Ñ–∞–π–ª
          if (file.name && file.name.toLowerCase().endsWith('.svg')) {
            if (file.assetId) {
              console.log(`üîç Getting public URL for SVG assetId: ${file.assetId}`);
              const publicUrl = await this.getPublicAssetUrl(file.assetId);
              
              if (publicUrl) {
                console.log(`‚úÖ Got public SVG URL: ${publicUrl}`);
                return publicUrl;
              } else {
                console.warn(`‚ö†Ô∏è Could not get public URL for SVG assetId: ${file.assetId}`);
                const mondayFileUrl = `https://files.monday.com/files/${file.assetId}`;
                return this.createProxyUrl(mondayFileUrl);
              }
            } else if (file.url) {
              console.log(`‚úÖ Found direct SVG URL: ${file.url}`);
              return file.url;
            }
          } else {
            console.log(`‚ö†Ô∏è File found but not SVG: ${file.name}`);
          }
        }
      } catch (e) {
        console.error('‚ùå Error parsing SVG field:', e);
      }

      return null;
    } catch (error) {
      console.error('‚ùå Error fetching SVG from Monday:', error);
      return null;
    }
  }

  // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É Monday.com —Å API —Ç–æ–∫–µ–Ω–æ–º
  async fetchMondayFile(fileUrl: string): Promise<Blob | null> {
    try {
      const response = await fetch(fileUrl, {
        headers: {
          'Authorization': this.apiToken,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch file: ${response.statusText}`);
      }

      return await response.blob();
    } catch (error) {
      console.error('‚ùå Error fetching Monday file:', error);
      return null;
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Monday.com items –≤ NeonDesign
  private convertMondayItemsToNeonDesigns(items: MondayItem[]): NeonDesign[] {
    console.log(`üîÑ Converting ${items.length} Monday items to NeonDesign objects...`);
    
    return items.map(item => {
      console.log(`üìù Processing item: ${item.name} (ID: ${item.id})`);
      console.log(`üìä Column values: (${item.column_values.length})`, item.column_values.map(col => ({
        id: col.id,
        text: col.text,
        hasValue: !!col.value
      })));
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º ID
      const clientEmail = this.getColumnValue(item, 'email') || 
                         this.getColumnValue(item, 'person') || 
                         this.getColumnValue(item, 'dup__of_email') ||
                         'no-email@example.com';
      
      const clientName = this.getColumnValue(item, 'person') || 
                        this.getColumnValue(item, 'name') || 
                        this.getColumnValue(item, 'dup__of_name') ||
                        item.name || 
                        'Unknown Client';
      
      const designName = item.name || 'Untitled Design';
      
      const notes = this.getColumnValue(item, 'long_text') || 
                   this.getColumnValue(item, 'text') || 
                   this.getColumnValue(item, 'notes') ||
                   '';
      
      const status = this.getColumnValue(item, 'status') || 
                    this.getColumnValue(item, 'status4') ||
                    'draft';

      console.log(`üìä Extracted data - Email: ${clientEmail}, Name: ${clientName}, Status: ${status}`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–æ–ª–µ–π Monday.com
      const widthValue = this.getColumnValue(item, 'numeric_mkq65yv') || // –†–∞–∑–º–µ—Ä –≤ —Å–º
                        this.getColumnValue(item, 'width') ||
                        this.getColumnValue(item, 'breite') ||
                        '100';
      
      const configText = this.getColumnValue(item, 'long_text_mkqvt793') || // –¢–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        this.getColumnValue(item, 'configuration') ||
                        '';
      
      // –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä
      const parsedWidth = parseInt(widthValue) || 100;
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const isWaterproof = configText.toLowerCase().includes('wasserdicht') || 
                          configText.toLowerCase().includes('outdoor') ||
                          configText.toLowerCase().includes('waterproof');
      
      const hasUvPrint = configText.toLowerCase().includes('uv') ||
                        configText.toLowerCase().includes('druck') ||
                        configText.toLowerCase().includes('print');
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const calculatedHeight = Math.round(parsedWidth * 0.3); // 30% –æ—Ç —à–∏—Ä–∏–Ω—ã
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É LED (–ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö)
      const ledLength = (2 * (parsedWidth + calculatedHeight)) / 100; // –≤ –º–µ—Ç—Ä–∞—Ö
      
      console.log(`üìê Parsed dimensions: ${parsedWidth}x${calculatedHeight}cm, LED: ${ledLength}m`);
      console.log(`‚öôÔ∏è Configuration: waterproof=${isWaterproof}, uvPrint=${hasUvPrint}`);

      // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–æ–Ω–∞
      const neonDesign: NeonDesign = {
        id: item.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Monday ID –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        name: designName,
        originalWidth: parsedWidth, // –†–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑ Monday.com
        originalHeight: calculatedHeight, // –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        elements: 1,
        ledLength: ledLength, // –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ LED
        mockupUrl: '', // –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ –∏ subtable
        description: notes || `Neon design for ${clientName}`,
        svgContent: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        hasCustomSvg: false,
        createdAt: new Date().toISOString(),
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        isWaterproof: isWaterproof,
        hasUvPrint: hasUvPrint,
        configText: configText
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã MockUp –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ
      const mainMockupField1 = this.getColumnValue(item, 'file_mkq6eahq'); // –ü–æ–ª–µ 1
      const mainMockupField2 = this.getColumnValue(item, 'file_mkq6q0v2'); // –ü–æ–ª–µ 2
      
      console.log(`üìÅ Checking main board files for ${item.id}:`);
      console.log(`üìÅ file_mkq6eahq: ${mainMockupField1}`);
      console.log(`üìÅ file_mkq6q0v2: ${mainMockupField2}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ñ–∞–π–ª–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allFileFields = item.column_values.filter(col => col.id.startsWith('file_'));
      console.log(`üìÅ All file fields for ${item.id}:`, allFileFields.map(f => ({
        id: f.id,
        text: f.text,
        hasValue: !!f.value
      })));
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å URL —Ñ–∞–π–ª–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–∏
      if (mainMockupField1) {
        try {
          const fileData = JSON.parse(mainMockupField1);
          if (fileData.files && fileData.files.length > 0) {
            neonDesign.mockupUrl = this.createProxyUrl(fileData.files[0].url);
            console.log(`‚úÖ Found MockUp in main board (field 1): ${fileData.files[0].url}`);
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è Could not parse file_mkq6eahq:', e);
        }
      }
      
      if (!neonDesign.mockupUrl && mainMockupField2) {
        try {
          const fileData = JSON.parse(mainMockupField2);
          if (fileData.files && fileData.files.length > 0) {
            neonDesign.mockupUrl = this.createProxyUrl(fileData.files[0].url);
            console.log(`‚úÖ Found MockUp in main board (field 2): ${fileData.files[0].url}`);
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è Could not parse file_mkq6q0v2:', e);
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç MockUp, –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ñ–∞–π–ª–æ–≤—ã–µ –ø–æ–ª—è
      if (!neonDesign.mockupUrl) {
        for (const fileField of allFileFields) {
          if (fileField.value) {
            try {
              const fileData = JSON.parse(fileField.value);
              if (fileData.files && fileData.files.length > 0) {
                neonDesign.mockupUrl = this.createProxyUrl(fileData.files[0].url);
                console.log(`‚úÖ Found MockUp in field ${fileField.id}: ${fileData.files[0].url}`);
                break;
              }
            } catch (e) {
              console.warn(`‚ö†Ô∏è Could not parse ${fileField.id}:`, e);
            }
          }
        }
      }
      
      // –ï—Å–ª–∏ MockUp –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ, –ø—Ä–æ–≤–µ—Ä–∏–º subtable –ø–æ–∑–∂–µ
      if (!neonDesign.mockupUrl) {
        console.log(`üîç No MockUp found in main board for ${item.id}, will check subtable separately`);
      }

      // –ü–æ–∏—Å–∫ SVG —Ñ–∞–π–ª–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–µ
      console.log(`üîç Searching for SVG files in main board for ${item.id}...`);
      for (const fileField of allFileFields) {
        if (fileField.value && !neonDesign.svgUrl) {
          console.log(`üìÑ Checking file field ${fileField.id}:`, fileField.text);
          try {
            const fileData = JSON.parse(fileField.value);
            console.log(`üìä Parsed file data for ${fileField.id}:`, fileData);
            if (fileData.files && fileData.files.length > 0) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ñ–∞–π–ª—ã –≤ –ø–æ–ª–µ, –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
              for (const file of fileData.files) {
                console.log(`üìÑ Checking file: ${file.name}`);
                if (file.name && file.name.toLowerCase().endsWith('.svg')) {
                  (neonDesign as any).svgUrl = this.createProxyUrl(file.url || `https://files.monday.com/files/${file.assetId}`);
                  console.log(`‚úÖ Found SVG in field ${fileField.id}: ${file.name} -> ${(neonDesign as any).svgUrl}`);
                  break;
                }
              }
            }
          } catch (e) {
            console.warn(`‚ö†Ô∏è Could not parse SVG from ${fileField.id}:`, e);
          }
        }
      }
      
      if (!(neonDesign as any).svgUrl) {
        console.log(`üîç No SVG found in main board for ${item.id}`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      (neonDesign as any).clientEmail = clientEmail;
      (neonDesign as any).clientName = clientName;
      (neonDesign as any).status = status;
      (neonDesign as any).mondayId = item.id;

      return neonDesign;
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ id
  private getColumnValue(item: MondayItem, searchKey: string): string | null {
    const column = item.column_values.find(col => col.id === searchKey);
    
    // –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º value, –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö - text
    if (searchKey.startsWith('file_')) {
      return column?.value || null;
    }
    
    return column?.text || column?.value || null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Monday.com
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîÑ Testing Monday.com connection...');
      
      const query = `
        query {
          me {
            id
            name
            email
          }
        }
      `;

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.apiToken,
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        console.error(`‚ùå Monday API connection failed: ${response.status}`);
        return false;
      }

      const data = await response.json();
      
      if (data.errors && data.errors.length > 0) {
        console.error('‚ùå Monday GraphQL errors:', data.errors);
        return false;
      }

      console.log('‚úÖ Monday.com connection successful');
      return true;
    } catch (error) {
      console.error('‚ùå Error testing Monday connection:', error);
      return false;
    }
  }
}

export const mondayDirectService = new MondayDirectService();
export default mondayDirectService;
