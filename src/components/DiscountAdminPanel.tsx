import React, { useState, useEffect } from 'react';
import LottieLoader from './LottieLoader';
import { Percent, Plus, Edit3, Trash2, Save, X, Timer, Clock, Play, Pause } from 'lucide-react';
import { discountService, FakeDiscountConfiguration } from '../services/discountService';

interface Discount {
  id?: number;
  name: string;
  description: string;
  discount_type: 'percentage' | 'fixed_amount';
  discount_value: number;
  min_order_value?: number;
  max_discount_amount?: number;
  start_date?: string;
  end_date?: string;
  is_active: boolean;
  usage_limit?: number;
  usage_count: number;
  code?: string;
  created_at?: string;
  updated_at?: string;
}

const DiscountAdminPanel: React.FC = () => {
  const [discounts, setDiscounts] = useState<Discount[]>([]);
  const [loading, setLoading] = useState(false);
  const [editingDiscount, setEditingDiscount] = useState<Discount | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [message, setMessage] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
  const [fakeDiscount, setFakeDiscount] = useState<FakeDiscountConfiguration | null>(null);
  const [fakeDiscountForm, setFakeDiscountForm] = useState({
    name: '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –¥–Ω—è!',
    percentage: 25,
    duration: 60, // –º–∏–Ω—É—Ç—ã
    isActive: false
  });

  const emptyDiscount: Discount = {
    name: '',
    description: '',
    discount_type: 'percentage',
    discount_value: 0,
    min_order_value: 0,
    max_discount_amount: undefined,
    start_date: '',
    end_date: '',
    is_active: true,
    usage_limit: undefined,
    usage_count: 0,
    code: ''
  };

  useEffect(() => {
    loadDiscounts();
    loadFakeDiscount();
  }, []);

  const loadFakeDiscount = async () => {
    try {
      const nowIso = new Date().toISOString();
      const response = await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/fake_discounts?select=*&is_active=eq.true&start_date=lte.${nowIso}&end_date=gte.${nowIso}&order=start_date.desc&order=created_at.desc&limit=1`,
        {
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        
        if (data.length > 0) {
          const discount = data[0];
          const fakeDiscount = {
            id: discount.id.toString(),
            name: discount.name,
            percentage: discount.percentage,
            startDate: new Date(discount.start_date),
            endDate: new Date(discount.end_date),
            isActive: discount.is_active,
          };
          setFakeDiscount(fakeDiscount);
          
          const now = new Date();
          const isActive = now >= fakeDiscount.startDate && now <= fakeDiscount.endDate && fakeDiscount.isActive;
          
          setFakeDiscountForm({
            name: fakeDiscount.name,
            percentage: fakeDiscount.percentage,
            duration: Math.max(1, Math.ceil((fakeDiscount.endDate.getTime() - now.getTime()) / (1000 * 60))),
            isActive: isActive
          });
        } else {
          setFakeDiscount(null);
          setFakeDiscountForm({
            name: 'Limitiertes Angebot',
            percentage: 25,
            duration: 60,
            isActive: false
          });
        }
      }
    } catch (error) {
      console.error('Error loading fake discount:', error);
    }
  };

  const startFakeDiscount = async () => {
    setLoading(true);
    try {
      const now = new Date();
      const endDate = new Date();
      endDate.setMinutes(endDate.getMinutes() + fakeDiscountForm.duration);

      // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏
      await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/fake_discounts`,
        {
          method: 'PATCH',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            is_active: false
          })
        }
      );

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É
      const response = await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/fake_discounts`,
        {
          method: 'POST',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: fakeDiscountForm.name,
            percentage: fakeDiscountForm.percentage,
            start_date: now.toISOString(),
            end_date: endDate.toISOString(),
            is_active: true
          })
        }
      );

      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–µ—Ä–≤–∏—Å —Å–∫–∏–¥–æ–∫
        await loadFakeDiscount();
        await discountService.refreshFakeDiscount(true);
        setMessage('‚úÖ –§–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
      } else {
        throw new Error('Failed to create fake discount');
      }
    } catch (error) {
      console.error('Error starting fake discount:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∫–∏–¥–∫–∏');
    } finally {
      setLoading(false);
      setTimeout(() => setMessage(''), 3000);
    }
  };

  const stopFakeDiscount = async () => {
    if (!fakeDiscount) return;
    
    setLoading(true);
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/fake_discounts?id=eq.${fakeDiscount.id}`,
        {
          method: 'PATCH',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            is_active: false,
            end_date: new Date().toISOString()
          })
        }
      );

  await loadFakeDiscount();
  await discountService.refreshFakeDiscount(true);
      setMessage('‚èπÔ∏è –§–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    } catch (error) {
      console.error('Error stopping fake discount:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∫–∏–¥–∫–∏');
    } finally {
      setLoading(false);
      setTimeout(() => setMessage(''), 3000);
    }
  };

  const createFakeDiscountsTableIfNotExists = async () => {
    setLoading(true);
    setMessage('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫...');
    
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
      const testResponse = await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/fake_discounts?select=id&limit=1`,
        {
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
          }
        }
      );

      if (testResponse.ok) {
        setMessage('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å–∫–∏–¥–∫—É
        const data = await testResponse.json();
        if (data.length === 0) {
          await createDefaultFakeDiscount();
        }
        loadFakeDiscount();
      } else if (testResponse.status === 404) {
        // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        setMessage(`
‚ùå –¢–∞–±–ª–∏—Ü–∞ fake_discounts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. 

üìã –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Supabase Dashboard ‚Üí SQL Editor
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞: create_fake_discounts_table.sql
3. –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:

CREATE TABLE fake_discounts (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL DEFAULT 'Limitiertes Angebot',
  percentage INTEGER NOT NULL CHECK (percentage > 0 AND percentage <= 50) DEFAULT 25,
  start_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  end_date TIMESTAMPTZ NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE fake_discounts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON fake_discounts FOR SELECT USING (true);
CREATE POLICY "Allow public write access" ON fake_discounts FOR ALL USING (true);

INSERT INTO fake_discounts (name, percentage, start_date, end_date, is_active)
VALUES ('Flash Sale - Nur heute!', 25, NOW(), NOW() + INTERVAL '2 hours', true);

4. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞
        `);
        console.log('SQL —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞: create_fake_discounts_table.sql');
      } else {
        throw new Error(`HTTP error! status: ${testResponse.status}`);
      }
    } catch (error) {
      console.error('Error checking fake discounts table:', error);
      setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. 
      
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY –≤ .env —Ñ–∞–π–ª–µ
2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
3. –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ Supabase`);
    } finally {
      setLoading(false);
      setTimeout(() => setMessage(''), 15000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    }
  };

  const createDefaultFakeDiscount = async () => {
    const now = new Date();
    const endTime = new Date(now.getTime() + 2 * 60 * 60 * 1000); // 2 —á–∞—Å–∞
    
    try {
      await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/rest/v1/fake_discounts`,
        {
          method: 'POST',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: 'Flash Sale - Nur heute!',
            percentage: 25,
            start_date: now.toISOString(),
            end_date: endTime.toISOString(),
            is_active: true
          })
        }
      );
      
      setMessage('‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
      loadFakeDiscount();
    } catch (error) {
      console.error('Error creating default fake discount:', error);
    }
  };

  const loadDiscounts = async () => {
    setLoading(true);
    try {
      // First try to create table if it doesn't exist
      await createTableIfNotExists();
      
      // Use direct REST API call to avoid type issues
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/discounts?select=*&order=created_at.desc`, {
        headers: {
          'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setDiscounts(data || []);
    } catch (error) {
      console.error('Error loading discounts:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–¥–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.');
    } finally {
      setLoading(false);
    }
  };

  const createTableIfNotExists = async () => {
    try {
      // Try to create table using SQL
      const sql = `
        CREATE TABLE IF NOT EXISTS discounts (
          id SERIAL PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          discount_type VARCHAR(20) NOT NULL CHECK (discount_type IN ('percentage', 'fixed_amount')),
          discount_value DECIMAL(10,2) NOT NULL CHECK (discount_value > 0),
          min_order_value DECIMAL(10,2) DEFAULT NULL,
          max_discount_amount DECIMAL(10,2) DEFAULT NULL,
          start_date DATE DEFAULT NULL,
          end_date DATE DEFAULT NULL,
          is_active BOOLEAN DEFAULT TRUE,
          usage_limit INTEGER DEFAULT NULL,
          usage_count INTEGER DEFAULT 0,
          code VARCHAR(50) DEFAULT NULL UNIQUE,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        
        -- Enable RLS
        ALTER TABLE discounts ENABLE ROW LEVEL SECURITY;
        
        -- Create policy for public access to active discounts
        CREATE POLICY IF NOT EXISTS "Public can view active discounts" ON discounts
          FOR SELECT USING (is_active = true);
      `;

      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
        method: 'POST',
        headers: {
          'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ sql })
      });

      // It's ok if this fails - table might already exist or we might not have permissions
      if (response.ok) {
        console.log('‚úÖ Table created successfully');
      }
    } catch (error) {
      // Ignore table creation errors - table might already exist
      console.log('Table creation skipped:', error);
    }
  };

  const saveDiscount = async (discount: Discount) => {
    setLoading(true);
    try {
      const payload = {
        ...discount,
        updated_at: new Date().toISOString()
      };

      if (discount.id) {
        // Update existing
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/discounts?id=eq.${discount.id}`, {
          method: 'PATCH',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(payload)
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        setMessage('‚úÖ –°–∫–∏–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        // Create new
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/discounts`, {
          method: 'POST',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ...payload,
            created_at: new Date().toISOString()
          })
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        setMessage('‚úÖ –°–∫–∏–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      await loadDiscounts();
      setShowForm(false);
      setEditingDiscount(null);
    } catch (error) {
      console.error('Error saving discount:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  const deleteDiscount = async (id: number) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–∫–∏–¥–∫—É?')) return;
    
    setLoading(true);
    try {
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/discounts?id=eq.${id}`, {
        method: 'DELETE',
        headers: {
          'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      setMessage('‚úÖ –°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
      await loadDiscounts();
    } catch (error) {
      console.error('Error deleting discount:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  const toggleDiscountStatus = async (discount: Discount) => {
    setLoading(true);
    try {
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/discounts?id=eq.${discount.id}`, {
        method: 'PATCH',
        headers: {
          'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          is_active: !discount.is_active,
          updated_at: new Date().toISOString()
        })
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      setMessage(`‚úÖ –°–∫–∏–¥–∫–∞ ${!discount.is_active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
      await loadDiscounts();
    } catch (error) {
      console.error('Error toggling discount:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
      setLoading(false);
    }
  };

  const startEdit = (discount: Discount) => {
    setEditingDiscount({ ...discount });
    setShowForm(true);
  };

  const startCreate = () => {
    setEditingDiscount({ ...emptyDiscount });
    setShowForm(true);
  };

  const cancelEdit = () => {
    setEditingDiscount(null);
    setShowForm(false);
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const isDiscountExpired = (discount: Discount) => {
    if (!discount.end_date) return false;
    return new Date(discount.end_date) < new Date();
  };

  const isDiscountUsageLimitReached = (discount: Discount) => {
    if (!discount.usage_limit) return false;
    return discount.usage_count >= discount.usage_limit;
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <Percent className="h-8 w-8 text-green-600" />
            <div>
              <h1 className="text-2xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏</h1>
              <p className="text-gray-600">–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
            </div>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={createTableIfNotExists}
              disabled={loading}
              className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors text-sm"
              title="–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–∫–∏–¥–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            >
              <span>üîß</span>
              <span>–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É</span>
            </button>
            <button
              onClick={createFakeDiscountsTableIfNotExists}
              disabled={loading}
              className="flex items-center space-x-2 bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg transition-colors text-sm"
              title="–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫"
            >
              <span>‚ö°</span>
              <span>–¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫</span>
            </button>
            <button
              onClick={startCreate}
              disabled={loading}
              className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              <Plus className="h-4 w-4" />
              <span>–ù–æ–≤–∞—è —Å–∫–∏–¥–∫–∞</span>
            </button>
          </div>
        </div>

        {message && (
          <div className="mb-4 p-4 rounded-lg bg-blue-50 border border-blue-200">
            <pre className="text-blue-800 text-sm whitespace-pre-wrap font-sans">{message}</pre>
          </div>
        )}

        {/* –§–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º */}
        <div className="mb-6 p-6 border border-orange-200 rounded-lg bg-orange-50">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Timer className="h-5 w-5 mr-2 text-orange-600" />
            –§–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è)
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ
              </label>
              <input
                type="text"
                value={fakeDiscountForm.name}
                onChange={(e) => setFakeDiscountForm({...fakeDiscountForm, name: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
              </label>
              <input
                type="number"
                min="1"
                max="50"
                value={fakeDiscountForm.percentage}
                onChange={(e) => setFakeDiscountForm({...fakeDiscountForm, percentage: parseInt(e.target.value) || 0})}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)
              </label>
              <input
                type="number"
                min="5"
                max="1440"
                value={fakeDiscountForm.duration}
                onChange={(e) => setFakeDiscountForm({...fakeDiscountForm, duration: parseInt(e.target.value) || 60})}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div className="flex items-end">
              {fakeDiscountForm.isActive ? (
                <button
                  onClick={stopFakeDiscount}
                  className="w-full bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center justify-center space-x-2"
                >
                  <Pause className="h-4 w-4" />
                  <span>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</span>
                </button>
              ) : (
                <button
                  onClick={startFakeDiscount}
                  className="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center justify-center space-x-2"
                >
                  <Play className="h-4 w-4" />
                  <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å</span>
                </button>
              )}
            </div>
          </div>
          
          {fakeDiscount && fakeDiscountForm.isActive && (
            <div className="text-sm text-gray-600">
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {fakeDiscount.endDate.toLocaleString()}</p>
              <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –¶–µ–Ω–∞ –∑–∞–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ {fakeDiscount.percentage}%, –∑–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∫–∏–¥–∫–∞</p>
            </div>
          )}
        </div>

        {/* Form for creating/editing discount */}
        {showForm && editingDiscount && (
          <div className="mb-6 p-6 border border-gray-200 rounded-lg bg-gray-50">
            <h3 className="text-lg font-semibold mb-4">
              {editingDiscount.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫—É' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É'}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ *
                </label>
                <input
                  type="text"
                  value={editingDiscount.name}
                  onChange={(e) => setEditingDiscount({ ...editingDiscount, name: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ—Ç–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞"
                />
              </div>

              {/* Code */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü—Ä–æ–º–æ–∫–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                </label>
                <input
                  type="text"
                  value={editingDiscount.code || ''}
                  onChange={(e) => setEditingDiscount({ ...editingDiscount, code: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  placeholder="SUMMER2024"
                />
              </div>

              {/* Description */}
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={editingDiscount.description}
                  onChange={(e) => setEditingDiscount({ ...editingDiscount, description: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  rows={2}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
                />
              </div>

              {/* Discount Type */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –¢–∏–ø —Å–∫–∏–¥–∫–∏ *
                </label>
                <select
                  value={editingDiscount.discount_type}
                  onChange={(e) => setEditingDiscount({ 
                    ...editingDiscount, 
                    discount_type: e.target.value as 'percentage' | 'fixed_amount' 
                  })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                >
                  <option value="percentage">–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ (%)</option>
                  <option value="fixed_amount">–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (‚Ç¨)</option>
                </select>
              </div>

              {/* Discount Value */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ *
                </label>
                <div className="relative">
                  <input
                    type="number"
                    value={editingDiscount.discount_value}
                    onChange={(e) => setEditingDiscount({ 
                      ...editingDiscount, 
                      discount_value: parseFloat(e.target.value) || 0 
                    })}
                    className="w-full p-2 border border-gray-300 rounded-md pr-8"
                    min="0"
                    step={editingDiscount.discount_type === 'percentage' ? '1' : '0.01'}
                  />
                  <span className="absolute right-2 top-2 text-gray-500">
                    {editingDiscount.discount_type === 'percentage' ? '%' : '‚Ç¨'}
                  </span>
                </div>
              </div>

              {/* Min Order Value */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (‚Ç¨)
                </label>
                <input
                  type="number"
                  value={editingDiscount.min_order_value || ''}
                  onChange={(e) => setEditingDiscount({ 
                    ...editingDiscount, 
                    min_order_value: parseFloat(e.target.value) || undefined 
                  })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  min="0"
                  step="0.01"
                  placeholder="0"
                />
              </div>

              {/* Max Discount Amount (only for percentage) */}
              {editingDiscount.discount_type === 'percentage' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏ (‚Ç¨)
                  </label>
                  <input
                    type="number"
                    value={editingDiscount.max_discount_amount || ''}
                    onChange={(e) => setEditingDiscount({ 
                      ...editingDiscount, 
                      max_discount_amount: parseFloat(e.target.value) || undefined 
                    })}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    min="0"
                    step="0.01"
                    placeholder="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
                  />
                </div>
              )}

              {/* Start Date */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                </label>
                <input
                  type="date"
                  value={editingDiscount.start_date || ''}
                  onChange={(e) => setEditingDiscount({ ...editingDiscount, start_date: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                />
              </div>

              {/* End Date */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                </label>
                <input
                  type="date"
                  value={editingDiscount.end_date || ''}
                  onChange={(e) => setEditingDiscount({ ...editingDiscount, end_date: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                />
              </div>

              {/* Usage Limit */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                </label>
                <input
                  type="number"
                  value={editingDiscount.usage_limit || ''}
                  onChange={(e) => setEditingDiscount({ 
                    ...editingDiscount, 
                    usage_limit: parseInt(e.target.value) || undefined 
                  })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  min="1"
                  placeholder="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
                />
              </div>

              {/* Active Status */}
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="is_active"
                  checked={editingDiscount.is_active}
                  onChange={(e) => setEditingDiscount({ ...editingDiscount, is_active: e.target.checked })}
                  className="h-4 w-4 text-green-600"
                />
                <label htmlFor="is_active" className="text-sm font-medium text-gray-700">
                  –°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                </label>
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={cancelEdit}
                className="px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors"
              >
                <X className="h-4 w-4 inline mr-2" />
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={() => saveDiscount(editingDiscount)}
                disabled={loading || !editingDiscount.name || editingDiscount.discount_value <= 0}
                className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors disabled:opacity-50"
              >
                <Save className="h-4 w-4 inline mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        {/* Discounts List */}
        <div className="space-y-4">
          {loading && discounts.length === 0 ? (
            <div className="text-center py-8">
              <LottieLoader size={32} label="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–¥–æ–∫..." />
            </div>
          ) : discounts.length === 0 ? (
            <div className="text-center py-8">
              <Percent className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600">–°–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-gray-500 text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–∫–∏–¥–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</p>
            </div>
          ) : (
            discounts.map((discount) => (
              <div 
                key={discount.id} 
                className={`p-4 border rounded-lg ${
                  discount.is_active && !isDiscountExpired(discount) && !isDiscountUsageLimitReached(discount)
                    ? 'bg-green-50 border-green-200' 
                    : 'bg-gray-50 border-gray-200'
                }`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h3 className="text-lg font-semibold text-gray-900">{discount.name}</h3>
                      {discount.code && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-mono rounded">
                          {discount.code}
                        </span>
                      )}
                      <span className={`px-2 py-1 text-xs font-medium rounded ${
                        discount.is_active 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {discount.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                      </span>
                      {isDiscountExpired(discount) && (
                        <span className="px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded">
                          –ò—Å—Ç–µ–∫–ª–∞
                        </span>
                      )}
                      {isDiscountUsageLimitReached(discount) && (
                        <span className="px-2 py-1 bg-orange-100 text-orange-800 text-xs font-medium rounded">
                          –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
                        </span>
                      )}
                    </div>
                    
                    <p className="text-gray-600 mb-2">{discount.description}</p>
                    
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-700">
                      <div>
                        <span className="font-medium">–°–∫–∏–¥–∫–∞:</span>{' '}
                        {discount.discount_type === 'percentage' 
                          ? `${discount.discount_value}%` 
                          : `‚Ç¨${discount.discount_value}`
                        }
                      </div>
                      <div>
                        <span className="font-medium">–ú–∏–Ω. –∑–∞–∫–∞–∑:</span>{' '}
                        {discount.min_order_value ? `‚Ç¨${discount.min_order_value}` : '–ù–µ—Ç'}
                      </div>
                      <div>
                        <span className="font-medium">–ü–µ—Ä–∏–æ–¥:</span>{' '}
                        {discount.start_date ? formatDate(discount.start_date) : '–ù–µ —É–∫–∞–∑–∞–Ω'} -{' '}
                        {discount.end_date ? formatDate(discount.end_date) : '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'}
                      </div>
                      <div>
                        <span className="font-medium">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</span>{' '}
                        {discount.usage_count}/{discount.usage_limit || '‚àû'}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 ml-4">
                    <button
                      onClick={() => toggleDiscountStatus(discount)}
                      disabled={loading}
                      className={`p-2 rounded-lg transition-colors ${
                        discount.is_active 
                          ? 'bg-red-100 hover:bg-red-200 text-red-700' 
                          : 'bg-green-100 hover:bg-green-200 text-green-700'
                      }`}
                      title={discount.is_active ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                    >
                      {discount.is_active ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
                    </button>
                    <button
                      onClick={() => startEdit(discount)}
                      disabled={loading}
                      className="p-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg transition-colors"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      <Edit3 className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => discount.id && deleteDiscount(discount.id)}
                      disabled={loading}
                      className="p-2 bg-red-100 hover:bg-red-200 text-red-700 rounded-lg transition-colors"
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default DiscountAdminPanel;
